-- Compat info - Tidal commit: 213c8f5a5f35a921c860d69ed968fa8f48cd333a


let setbpm bpm = setcps (bpm/60/4)

setbpm 126

{-

Combinators:

rev pat
every n f pat
slow n pat
fast n pat
whenmod tot norm
<~
~>

stack
cat

-}

{-

Effects:

n s
orbit n
crush pat
speed pat
gain pat
cutoff?
resonance?
cut "group"

gain - changes volume, values from 0 to 1
pan - pans sound right and left, values from 0 to 1
shape - a type of amplifier, values from 0 to 1
vowel - a vowel formant filter, values include a, e, i, o, and u
speed - changes playback speed of a sample, see below

-}

{-

Sounds:
arpy
bd
sn
hc
cp
supergong
hh

flick sid can metal future gabba sn mouth co gretsch mt arp h cp
cr newnotes bass crow hc tabla bass0 hh bass1 bass2 oc bass3 ho
odx diphone2 house off ht tink perc bd industrial pluck trump
printshort jazz voodoo birds3 procshort blip drum jvbass psr
wobble drumtraks koy rave bottle kurt latibro rm sax lighter lt
arpy feel less stab ul

Synths:
    a series of tutorials: tutorial1, tutorial2, tutorial3, tutorial4, tutorial5
    examples of modulating with the cursor or sound input: pmsin, in, inr
    physical modeling synths: supermandolin, supergong, superpiano, superhex
    a basic synth drumkit: superkick, superhat, supersnare, superclap, super808
    four analogue-style synths: supersquare, supersaw, superpwm, supercomparator
    two digital-style synths: superchip, supernoise


Patterns:
sine
saw
tri
square

Pattern strings:
[] seq
{,} polymetric
[,] polyrhythm
? maybe play
~ rest

-}

hush

interpolateIn 1 4 $ sound "jvbass(3,8)"

anticipateIn 1 4 $ sound "jvbass(5,8)"

p 1 $ sound "bd sd bd cp"

xfadeIn 1 4 $ sound "hc*8"


d1 $ sound (samples "hc*8" (iter 4 $ run 4))

p 1 $ sound "bd(5,8)"

(anticipate 3) $ sound (samples "bd(3,8)" (run 3))

d1 $ s "arpy*8" # n (irand 30)

hush

d1 $ whenmod 8 6 (const $ sound "arpy(3,8) bd*4") $ sound "bd sn bass2 sn"

d1 $ sound "{bd hh sn cp can}%4"

d1 $ every 3 (0.25 <~) $ sound "bd*2 cp*2 hh sn"



-- OSC
d1 $ sound "bd" # gain (cF 1 "bd-gain")

hush

p "k"
$ sound "bd*4"
# orbit 1
# crush "7"
# speed "0.7"
# room 0.3
# size 0.9

p "h"
$ whenmod 8 6 (const $ sound "~")
$ sound "hh(7,16,14)"
# orbit 2
# speed "1.2"
# gain "1.1"
# room 0.4

p "s"
$ whenmod 8 4 (const $ slow 4 $ sound "~ ~ ~ [~ ~ cp cp]")
$ sound "~ cp ~ cp"

p "pad"
$ sound "jazz:5*4"
# orbit 3
# speed "[1 1 0.8 0.9]/8"
# delay 0.6
# delayfb 0.75
# delayt (1/3)
# hpq 0.7
# hpf 600

d5
$ sound "bass1:3 ~ ~ ~ ~"
# sustain "0.4 0.2"
# speed "1.1"


d1 $ sound "bd(5,8) sn*2" # orbit 1 # delay 0.5

hush

d1 $ sound "[bd sn sn*3]/2 [bd sn*3 bd*4]/3"

d1 $ sound "[bd bd, ~ cp]*2"

d2 $ sound "[~ hh]*4" # delay 0.3 # orbit 1



d1 $ silence

hush

d1 silence

d2 $ slow 2 $ s "casio [casio*2] ~ ~" # speed "<0.4 0.6>"

d3 $ sound ((cat ["can*8", "[cp*4 sn*4, jvbass*16]"] ))

d4 $ slow 2 $ s "bd bd bd bd bd bd [bd*4] [bd*4]"

d1 $ sound "voodoo:6 drum:2 drum:1 [~ voodoo:6]" |+|
     speed "0.3 0.2 0.4 0.3" |+|
     vowel "o" |+|
     shape "0.05 0.2 0.4 0.6" |+|
     vowel "a e i o u ~"

hush

d1 $ n "<[a5,cs5,e5,g5]*3 [d5,fs5,g5,c5]>" # s "supersquare" # gain "0.7"

d2 $ every 4 (rev) $ n "<[g5 df5 e5 a5] [gf5 d5 c5 g5]*3>" # s "supersaw"


"808bd:1"


















p "k"
$ s "bd:1(7,16)"
# orbit 1
# gain (range 0 2 $ cF 0 "cc1")
# room (range 0 2 $ cF 0 "cc3")
# size (range 0 2 $ cF 0 "cc4")
# lpf (rangex 0 20000 $ cF 40 "cc2")





p "h"
  $ whenmod 8 6 (const $ sound "~")
$ sound "hh(7,16,14)"
# orbit 2
# speed "1.2"
# gain "1.1"
# room 0.4

p "a"
$ n "c4(5,16)"
# s "supersaw"
# legato 1.1


hush

p "k"
$ sound "bd(2,7)"

p "h"
$ sound "hh*4"
# tremr 30


d1
$ n (arp "<up down diverge>" "<a'm9'8 e'7sus4'8>")
# sound "superpiano"


let shiftBy n = (n <~)
    shift = shiftBy 1
    rand' n = shiftBy n $ rand


d1 $ weave 16 (pan sine)
  [sound "bd sn cp",
   sound "casio casio:1",
   sound "[jvbass*2 jvbass:2]/2",
   sound "hc*4"
  ]


d1 $ weave 8 (gain sine) [sound "bd sn", sound "cp(3,8)"]

hush



d1
$ stack
[ s "bd sn" # orbit 1 # pan 1 # room 1 # size 0.9
, s "bd sn" # orbit 0 # pan 0
]

hush

d1 $ s "jazz:5*4"


d1
$ superimpose ((# orbit 1) . (+ pan 1) . (+ room 1) . (+ size 0.9))
$ s "bd sn"
# orbit 0
# pan 0

--     physical modeling synths: supermandolin, supergong, superpiano, superhex
--    a basic synth drumkit: superkick, superhat, supersnare, superclap, super808
--    four analogue-style synths: supersquare, supersaw, superpwm, supercomparator
--   two digital-style synths: superchip, supernoise

p "bass"
$ n "c3 d3*2"
# s "superhammond"
# voice 6

p "moog"
$ n "c3 d3*2"
# s "superpwm"
# voice 0.6
# lfo 0.9
# pitch1 2.4

p "resonant"
$ n "c3 d3*2"
# s "supersaw"
# voice 0.5
# resonance 0.9
# lfo 0.1
# pitch1 0.5

p "bass"
$ n "c3 d3*2"
# s "superkick"



hush

d1 $ n (toScale [0,2,4,5,7,9,11] $ ("[1 ~ 1 5 ~ 5 6 ~ 6 4 ~ 4]/2"-1 + "[0,2,4]")) # s "superhammond"













reverbPan :: Pattern Double -> ControlPattern
reverbPan = pF "reverbPan"

p "k" $ s "bd*4"
# room 0.7
# reverbPan 0.5


hush
